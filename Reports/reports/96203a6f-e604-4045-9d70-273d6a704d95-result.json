{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00007FF66E405355+78597]\n\tGetHandleVerifier [0x00007FF66E4053B0+78688]\n\t(No symbol) [0x00007FF66E1B8FDC]\n\t(No symbol) [0x00007FF66E1FF51F]\n\t(No symbol) [0x00007FF66E236FB2]\n\t(No symbol) [0x00007FF66E2319CC]\n\t(No symbol) [0x00007FF66E230AA9]\n\t(No symbol) [0x00007FF66E185AB5]\n\tGetHandleVerifier [0x00007FF66E6AEF0D+2870973]\n\tGetHandleVerifier [0x00007FF66E6A96B8+2848360]\n\tGetHandleVerifier [0x00007FF66E6C6993+2967875]\n\tGetHandleVerifier [0x00007FF66E42019A+188746]\n\tGetHandleVerifier [0x00007FF66E42847F+222255]\n\t(No symbol) [0x00007FF66E184B28]\n\tGetHandleVerifier [0x00007FF66E7B0688+3925560]\n\tBaseThreadInitThunk [0x00007FF8D90E7374+20]\n\tRtlUserThreadStart [0x00007FF8D9FDCC91+33]", "trace": "self = <testCases.test_Login.Test_001_Login object at 0x0000027C26F9B4D0>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d439acc945d68b590ae77a21222f48d2\")>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_login(self,setup):\n    \n        self.driver = setup\n        self.driver.get(self.baseURL)\n    \n        # Creare LoginPage Object\n        self.lp = Login(self.driver)\n    \n        # Enter User name and Password\n        self.lp.setUserName(self.username)\n        self.lp.setPassword(self.password)\n        self.lp.click_On_Login_Btn()\n    \n        act_title = self.driver.title\n        self.driver.close()\n    \n        # Check Home page title\n        if act_title == \"Cogmento CRM\":\n            assert True\n        else:\n            # attach the screenshot while test case goes fail\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Title Not Matched\", attachment_type=AttachmentType.PNG)\n            assert False\n    \n        # User Logout successfully\n>       self.lp.click_On_Logout_btn()\n\ntestCases\\test_Login.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObject\\LoginPage.py:29: in click_On_Logout_btn\n    setting = wait.until(EC.element_to_be_clickable((By.XPATH,self.icon_setting_xpath)))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027C27078B90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...B0688+3925560]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8D90E7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8D9FDCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66E405355+78597]\nE       \tGetHandleVerifier [0x00007FF66E4053B0+78688]\nE       \t(No symbol) [0x00007FF66E1B8FDC]\nE       \t(No symbol) [0x00007FF66E1FF51F]\nE       \t(No symbol) [0x00007FF66E236FB2]\nE       \t(No symbol) [0x00007FF66E2319CC]\nE       \t(No symbol) [0x00007FF66E230AA9]\nE       \t(No symbol) [0x00007FF66E185AB5]\nE       \tGetHandleVerifier [0x00007FF66E6AEF0D+2870973]\nE       \tGetHandleVerifier [0x00007FF66E6A96B8+2848360]\nE       \tGetHandleVerifier [0x00007FF66E6C6993+2967875]\nE       \tGetHandleVerifier [0x00007FF66E42019A+188746]\nE       \tGetHandleVerifier [0x00007FF66E42847F+222255]\nE       \t(No symbol) [0x00007FF66E184B28]\nE       \tGetHandleVerifier [0x00007FF66E7B0688+3925560]\nE       \tBaseThreadInitThunk [0x00007FF8D90E7374+20]\nE       \tRtlUserThreadStart [0x00007FF8D9FDCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "start": 1744979879998, "stop": 1744979886394, "uuid": "79ee3721-11c6-45c2-a333-642425c7814f", "historyId": "b5304731eeb2fb669268a3203af37c9d", "testCaseId": "b5304731eeb2fb669268a3203af37c9d", "fullName": "testCases.test_Login.Test_001_Login#test_login", "labels": [{"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_Login"}, {"name": "subSuite", "value": "Test_001_Login"}, {"name": "host", "value": "SOS-LT-058"}, {"name": "thread", "value": "3148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_Login"}]}